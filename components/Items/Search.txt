import React, { useContext, useEffect, useState } from "react";
import Select from "react-select";
import { DataContext } from "../../context/DataContext";
import { motion, useScroll } from "framer-motion";

const Search: React.FC = () => {
  const { state, actions } = useContext(DataContext);
  const [showInput, setShowInput] = useState(false);
  const [displaySearchBar, setDisplaySearchBar] = useState(true);
  const [style, setStyle] = useState({});
  const [values, setValues] = useState([]);
  const { scrollY } = useScroll();

  scrollY.on("change", () => {
    if (scrollY.get() === 0 || scrollY.get() < scrollY.getPrevious()) {
      if (!displaySearchBar) {
        setDisplaySearchBar(true);
      }
      return;
    }
    if (showInput) {
      if (!displaySearchBar) {
        setDisplaySearchBar(true);
      }
      return;
    }
    if (displaySearchBar) {
      setDisplaySearchBar(false);
    }
  });

  const updateStyle = () => ({
    control: (styles, state) => ({
      ...styles,
    }),
    option: (styles, { data, isDisabled, isFocused, isSelected }) => {
      return {
        ...styles,
      };
    },
    multiValue: (styles, { data }) => {
      return {
        ...styles,
        backgroundColor: data.bgColor,
      };
    },
    multiValueLabel: (styles, { data }) => ({
      ...styles,
      color: data.textColor,
    }),
    multiValueRemove: (styles, { data }) => ({
      ...styles,
      color: data.textColor,
      cursor: "pointer",
      ":hover": {},
    }),
  });

  const onChangeHandler = (values, action) => {
    if (!values) {
      values = [];
    }
    setValues(values);
    actions.getPhotos({ categories: values }, true, 1);
    actions.setSelectedCategories(values);
  };

  const onClickHandler = (value) => {
    let valuesUpdated = values.filter((x) => x.label !== value.label);
    setValues(valuesUpdated);
    actions.getPhotos({ categories: valuesUpdated }, true, 1);
  };

  useEffect(() => {
    actions.getCategories();
    setStyle(updateStyle());
    return () => {};
  }, []);

  const icon = {
    hidden: {
      pathLength: 0,
      fill: "rgba(255, 255, 255, 0)",
    },
    visible: {
      pathLength: 1,
      fill: "rgba(255, 255, 255, 1)",
    },
  };

  return (
    <motion.div
      className={`component__search`}
      initial={{ transform: "translateY(0)" }}
      animate={
        displaySearchBar
          ? { transform: "translateY(0)" }
          : { transform: "translateY(-100px)" }
      }
    >
      <motion.div
        className="component__search-container"
        initial={{ width: "50px" }}
        animate={showInput ? { width: "350px" } : { width: "50px" }}
        transition={
          showInput
            ? { ease: "linear", delay: 0, duration: 0.15 }
            : { ease: "linear", delay: 0.3, duration: 0.15 }
        }
      >
        <motion.button
          className={`component__search-select-button`}
          onClick={() => setShowInput(!showInput)}
          initial={{ width: "50px" }}
          animate={showInput ? { width: "100%" } : { width: "50px" }}
          transition={
            showInput
              ? { ease: "linear", delay: 0, duration: 0.15 }
              : { ease: "linear", delay: 0.3, duration: 0.15 }
          }
        >
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <motion.path d="M17.9859 5.42367C14.0077 4.97906 9.99236 4.97906 6.01419 5.42367C5.74502 5.45376 5.6154 5.76941 5.78574 5.97998L9.30276 10.3275C10.5627 11.8849 11.25 13.8275 11.25 15.8307V18.7199L12.75 19.8199V15.8307C12.75 13.8275 13.4374 11.8849 14.6973 10.3275L18.2143 5.97998C18.3846 5.76941 18.255 5.45376 17.9859 5.42367ZM5.84758 3.93296C9.93648 3.47596 14.0636 3.47596 18.1525 3.93296C19.5994 4.09467 20.2962 5.79146 19.3805 6.92339L15.8635 11.2709C14.8195 12.5614 14.25 14.1709 14.25 15.8307V21.3C14.25 21.5826 14.0911 21.8413 13.839 21.969C13.5869 22.0968 13.2844 22.0719 13.0565 21.9048L10.0565 19.7048C9.86384 19.5635 9.75002 19.3389 9.75002 19.1V15.8307C9.75002 14.1709 9.18049 12.5614 8.13658 11.2709L4.61956 6.92339C3.70387 5.79146 4.40065 4.09467 5.84758 3.93296Z" />
          </svg>
        </motion.button>
        <motion.div
          className="component__search-select-container"
          initial={{ height: "0px", padding: 0 }}
          animate={
            showInput
              ? { height: "12rem", padding: 16 }
              : { height: "0px", padding: 0 }
          }
          transition={
            showInput
              ? { ease: "linear", delay: 0.3, duration: 0.15 }
              : { ease: "linear", delay: 0, duration: 0.15 }
          }
        >
          <motion.div
            className="component_search-content"
            initial={{ display: "none" }}
            animate={showInput ? { display: "block" } : { display: "none" }}
            transition={
              showInput
                ? { ease: "linear", delay: 0.6 }
                : { ease: "linear", delay: 0 }
            }
          >
            <h6 className="component__search-title">Catégories</h6>
            <Select
              id="long-value-select"
              instanceId="long-value-select"
              className={`component__search-select`}
              controlShouldRenderValue={false}
              classNamePrefix={`component__search`}
              placeholder="Rechercher"
              noOptionsMessage={() => "Aucune correspondance"}
              isMulti
              options={state.categories}
              styles={style}
              value={values}
              onChange={onChangeHandler}
              defaultValue={state.selectedCategories}
            />
            <p className="component__search-description">
              Saisissez un terme à chercher.
            </p>
          </motion.div>
        </motion.div>
      </motion.div>
      <div className="filters_container">
        {values.map((value) => (
          <button onClick={() => onClickHandler(value)}>{value.label}</button>
        ))}
      </div>
    </motion.div>
  );
};

export default Search;
